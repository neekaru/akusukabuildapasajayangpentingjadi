name: Build and Release net-snmp

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: 'Build Configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - MSVCDYNAMIC64
          - MSVCSTATIC64
          - INSTALLER

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout net-snmp repository
      uses: actions/checkout@v4
      with:
        repository: net-snmp/net-snmp
        path: net-snmp

    - name: Install winget
      uses: Cyberboss/install-winget@v1
      with:
        GITHUB_TOKEN: ${{ secrets.MALAS_TOKEN }}
        wget_release_id: latest

    - name: Setup MSVC and environment variables
      shell: cmd
      run: |
        set VCVARSPATH=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build
        if not exist "%VCVARSPATH%" (
          echo "Error: MSVC vcvars64.bat not found. Visual Studio 2022 Enterprise is required."
          exit /b 1
        )
        call "%VCVARSPATH%\vcvars64.bat"
        set PATH=C:\Perl64\bin;%PATH%
        set OPENSSLDIR=C:\OpenSSL-Win64
        set PATH=%PATH%;C:\cygwin64\bin
        set INCLUDE=%INCLUDE%;C:\OpenSSL-Win64\include
        set LIB=%LIB%;C:\OpenSSL-Win64\lib;C:\OpenSSL-Win64\lib\VC

    - name: Install OpenSSL dependency
      shell: powershell
      run: |
        choco install openssl -y
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        Update-SessionEnvironment
        Write-Output "OpenSSL version:"
        openssl version

    - name: Remove Strawberry Perl if exists
      shell: powershell
      run: |
        if (Test-Path -Path "C:\Strawberry") {
          Write-Output "Strawberry Perl installation found at C:\Strawberry. Removing..."
          Remove-Item -Recurse -Force "C:\Strawberry"
        } else {
          Write-Output "No Strawberry Perl installation detected."
        }

    - name: Install ActivePerl using winget
      shell: powershell
      run: |
        winget install --id ActiveState.ActivePerl --silent --accept-package-agreements --accept-source-agreements
        if ($LASTEXITCODE -ne 0) {
          Write-Output "ActivePerl installation failed."
          exit $LASTEXITCODE
        }
        Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
        Update-SessionEnvironment
        Write-Output "Perl version:"
        perl -v

    - name: Upload ActivePerl MSI log
      if: always()
      shell: powershell
      run: |
        New-Item -ItemType Directory -Path "artifacts" -Force
        if (Test-Path -Path "c:\ActivePerl_msi_install.log") {
          Copy-Item -Path "c:\ActivePerl_msi_install.log" -Destination "artifacts\"
        } else {
          Write-Output "MSI log file not found."

    - name: Upload log artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ActivePerl_msi_log
        path: artifacts/ActivePerl_msi_install.log

    - name: Modify build.bat
      shell: powershell
      run: |
        $buildBatPath = "net-snmp/ci/build.bat"
        if (Test-Path -Path $buildBatPath) {
          (Get-Content -Path $buildBatPath) -replace 'set p=C:\\Program Files \(x86\)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build', 'set p=C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Auxiliary\\Build' |
          Set-Content -Path $buildBatPath
        } else {
          Write-Output "build.bat not found."
          exit 1

    - name: Build net-snmp
      shell: cmd
      run: |
        cd net-snmp
        set BUILD=${{ inputs.buildType }}
        call ci/build.bat
        if %errorlevel% neq 0 exit /b %errorlevel%

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: net-snmp-${{ inputs.buildType }}
        path: |
          c:/usr/**/*
          !**/*.pdb
          !**/*.obj

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: net-snmp-${{ inputs.buildType }}
        path: build

    - name: Create zip file
      run: |
        cd build
        zip -r ../net-snmp-${{ inputs.buildType }}.zip ./

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MALAS_TOKEN }}
      with:
        tag_name: release-${{ github.sha }}
        release_name: Net-SNMP Build For ${{ inputs.buildType }}-${{ github.sha }}
        body: |
          Net-SNMP release build for commit ${{ github.sha }}
          Build Configuration: ${{ inputs.buildType }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MALAS_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: net-snmp-${{ inputs.buildType }}.zip
        asset_name: net-snmp-${{ inputs.buildType }}.zip
        asset_content_type: application/zip